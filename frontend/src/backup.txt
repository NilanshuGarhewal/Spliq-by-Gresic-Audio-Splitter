import React, { useState } from "react";
import axios from "axios";
import "./HomeSection.scss";
import Header from "./Header/Header";

const HeroSection = () => {
  const [file, setFile] = useState(null);
  const [loading, setLoading] = useState(false);
  const [stems, setStems] = useState([]);

  const handleFileChange = (e) => {
    setFile(e.target.files[0]);
  };

  const handleUpload = async () => {
    if (!file) return alert("Please select a file first!");

    const formData = new FormData();
    formData.append("file", file);

    try {
      setLoading(true);
      const response = await axios.post(
        "http://127.0.0.1:8000/split",
        formData,
        {
          responseType: "blob", // Important: backend returns ZIP
          headers: { "Content-Type": "multipart/form-data" },
        }
      );

      // Create blob URL from ZIP file
      const zipBlob = new Blob([response.data], { type: "application/zip" });
      // const _zipUrl = URL.createObjectURL(zipBlob);

      // Option 1: Let user just download ZIP
      // window.open(zipUrl);

      // Option 2: Extract stems on frontend (requires JS unzip library like JSZip)
      import("jszip").then(async (JSZip) => {
        const zip = await JSZip.loadAsync(zipBlob);
        const extracted = [];

        for (const filename of Object.keys(zip.files)) {
          const fileData = await zip.files[filename].async("blob");
          const url = URL.createObjectURL(fileData);
          extracted.push({ name: filename, url });
        }

        setStems(extracted);
      });
    } catch (err) {
      console.error(err);
      alert("Upload failed!");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="hero-section">
      <Header />

      <div className="input-container">
        <div className="input-header">
          <span className="title">Input</span>
        </div>

        <div className="input-wrapper">
          <div className="input-box">
            <label className="input-text" htmlFor="audio-file-input">
              <span className="title">Add or drop a file</span>

              <span className="des">Click & browse, or drag & drop here</span>
            </label>

            <input
              id="audio-file-input"
              type="file"
              onChange={handleFileChange}
              className="file-input"
            />
          </div>

          <div className="input-control">
            <div
              className="reset-btn button-dark"
              onClick={handleUpload}
              disabled={loading}
            >
              {loading ? "Processing..." : "Reset"}
            </div>

            <div
              className="upload-btn button"
              onClick={handleUpload}
              disabled={loading}
            >
              {loading ? "Processing..." : "Select"}
            </div>
          </div>

          {/* <div className="upload-btn" onClick={handleUpload} disabled={loading}>
            {loading ? "Processing..." : "Upload & Split"}
          </div> */}
        </div>
      </div>

      {/* Show stems */}
      {stems.length > 0 && (
        <div className="stems-container">
          <h3>Extracted Stems:</h3>
          {stems.map((stem, idx) => (
            <div key={idx} className="stem-item">
              <p>{stem.name}</p>
              <audio controls src={stem.url}></audio>
              <a href={stem.url} download={stem.name}>
                Download
              </a>
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

export default HeroSection;




      {/* Show stems */}
      {stems.length > 0 && (
        <div className="stems-container">
          <h3>Extracted Stems:</h3>
          {stems.map((stem, idx) => (
            <div key={idx} className="stem-item">
              <p>{stem.name}</p>
              <audio controls src={stem.url}></audio>
              <a href={stem.url} download={stem.name}>
                download
              </a>
            </div>
          ))}
        </div>
      )}





      {/* <div className="single-control">
              <span className="mute">M</span>
              <span className="single">S</span>
            </div> */}